import pandas as pd
import numpy as np
import time
import matplotlib.pyplot as plt
from collections import defaultdict

from binary_search_tree import BinarySearchTree
from Object import obj
from hash_table import HashTable
from red_black_tree import RedBlackTree

# @brief тут я готовлю массивы данных, чтобы отправлять их в функции сортировки, как и требуется в задании
# mas_1 = []
# df_1 = pd.read_csv("Data_100.csv")
# l = len(df_1)
# for i in range(l):
#     mas_1.append(obj(df_1['Author'][i], df_1['Books'][i], df_1['Year Published'][i], df_1['Pages'][i]))
# print(len(mas_1))

# mas_2 = []
# df_2 = pd.read_csv("Data_500.csv")
# l = len(df_2)
# for i in range(l):
#     mas_2.append(obj(df_2['Author'][i], df_2['Books'][i], df_2['Year Published'][i], df_2['Pages'][i]))
# print(len(mas_2))

# mas_3 = []
# df_3 = pd.read_csv("Data_1000.csv")
# l = len(df_3)
# for i in range(l):
#     mas_3.append(obj(df_3['Author'][i], df_3['Books'][i], df_3['Year Published'][i], df_3['Pages'][i]))
# print(len(mas_3))

# mas_4 = []
# df_4 = pd.read_csv("Data_5000.csv")
# l = len(df_4)
# for i in range(l):
#     mas_4.append(obj(df_4['Author'][i], df_4['Books'][i], df_4['Year Published'][i], df_4['Pages'][i]))
# print(len(mas_4))

# mas_5 = []
# df_5 = pd.read_csv("Data_10000.csv")
# l = len(df_5)
# for i in range(l):
#     mas_5.append(obj(df_5['Author'][i], df_5['Books'][i], df_5['Year Published'][i], df_5['Pages'][i]))
# print(len(mas_5))

# mas_6 = []
# df_6 = pd.read_csv("Data_50000.csv")
# l = len(df_6)
# for i in range(l):
#     mas_6.append(obj(df_6['Author'][i], df_6['Books'][i], df_6['Year Published'][i], df_6['Pages'][i]))
# print(len(mas_6))

mas_7 = []
df_7 = pd.read_csv("Data_100.csv")
l = len(df_7)
for i in range(l):
    mas_7.append(obj(df_7['Author'][i], df_7['Books'][i], df_7['Year Published'][i], df_7['Pages'][i]))
# print(len(mas_7))

# mass = [mas_1, mas_2, mas_3, mas_4, mas_5, mas_6, mas_7]
# # @brief Формирую, так же, координаты по х для графиков: размеры массивов
# x = []
# for i in mass:
#     x.append(len(i))
# print(x)

# @brief тут я готовлю массивы данных о времени выполнения каждой программы (вставляю просто нужную функицю и считаю время)
# ! бинарное дерево поиска
bin_times = []
tmp = mas_7[:]
#время на создание бинарного дерева поиска
start = time.time()
search_1 = defaultdict(list)
for i in tmp:
    search_1[i.author].append(i)
bin_times.append(time.time() - start)

#время на поиск случайного элеента
elem = np.random.choice(tmp, size=1)[0]
start = time.time()
print(search_1[elem.author])
bin_times.append(time.time() - start)

# общее время
bin_times.append(bin_times[0] + bin_times[1])

print(bin_times)


# @brief тут я готовлю и обрабатываю графики
x = [100, 500, 1000, 5000, 10000, 50000, 100000]

# 100: 8.797645568847656e-05, 2.193450927734375e-05, 0.00010991096496582031
# 500: 0.0004899501800537109, 1.9073486328125e-05, 0.0005090236663818359
# 1000: 0.0011548995971679688, 2.47955322265625e-05, 0.0011796951293945312
# 5000: 0.0127410888671875, 2.384185791015625e-05, 0.012764930725097656
# 10000: 0.05553483963012695, 2.9087066650390625e-05, 0.055563926696777344
# 50000: 1.3404419422149658, 3.409385681152344e-05, 1.3404760360717773
# 100000: 2.1850768089294434, 0.00031205673217773438, 2.185188865661621

bin_plot_y_build = [0.00010991096496582031, 0.0005090236663818359, 0.0011796951293945312, 0.012764930725097656, 0.055563926696777344, 1.3404760360717773, 2.185188865661621]
plt.plot(x, bin_plot_y_build)

# 100: 0.0016782283782958984, 3.170967102050781e-05, 0.0017099380493164062
# 500: 0.0016989707946777344, 2.9802322387695312e-05, 0.0017287731170654297
# 1000: 0.0017180442810058594, 3.409385681152344e-05, 0.0017521381378173828
# 5000: 0.003092050552368164, 5.030632019042969e-05, 0.0031423568725585938
# 10000: 0.003778696060180664, 3.4809112548828125e-05, 0.003813505172729492
# 50000: 0.013643980026245117, 5.078315734863281e-05, 0.01369476318359375
# 100000: 0.02608013153076172, 6.103515625e-05, 0.02614116668701172

hash_plot_y_build = [0.0017099380493164062, 0.0017287731170654297, 0.0017521381378173828, 0.0031423568725585938, 0.003813505172729492, 0.01369476318359375, 0.02614116668701172]
plt.plot(x, hash_plot_y_build)

# 100: 0.0010030269622802734, 6.198883056640625e-05, 0.0010650157928466797
# 500: 0.006124973297119141, 3.719329833984375e-05, 0.006162166595458984
# 1000: 0.013623952865600586, 4.100799560546875e-05, 0.013664960861206055
# 5000: 0.08663582801818848, 6.508827209472656e-05, 0.0867009162902832
# 10000: 0.17029190063476562, 6.723403930664062e-05, 0.17035913467407227
# 50000: 0.9835419654846191, 0.00012111663818359375, 0.9836630821228027
# 100000: 2.0850768089294434, 0.00011205673217773438, 2.085188865661621

rb_plot_y_build = [0.0010650157928466797, 0.006162166595458984, 0.013664960861206055, 0.0867009162902832, 0.17035913467407227, 0.9836630821228027, 2.085188865661621]
plt.plot(x, rb_plot_y_build)

# 100: 2.384185791015625e-05, 2.574920654296875e-05, 4.9591064453125e-05
# 500: 7.200241088867188e-05, 3.0279159545898438e-05, 0.00010228157043457031
# 1000: 0.00012993812561035156, 4.029273986816406e-05, 0.00017023086547851562
# 5000: 0.0006048679351806641, 0.00016188621520996094, 0.000766754150390625
# 10000: 0.0013051033020019531, 0.0002570152282714844, 0.0015621185302734375
# 50000: 0.0061070919036865234, 0.0009410381317138672, 0.007048130035400391
# 100000: 0.011326789855957031, 0.0014128684997558594, 0.01273965835571289

multimap_build = [4.9591064453125e-05, 0.00010228157043457031, 0.00017023086547851562, 0.000766754150390625, 0.0015621185302734375, 0.007048130035400391, 0.01273965835571289]
plt.plot(x, multimap_build)

plt.legend(('bin', 'hash', 'rb', 'multimap'))
plt.show()

# 100: 8.797645568847656e-05, 2.193450927734375e-05, 0.00010991096496582031
# 500: 0.0004899501800537109, 1.9073486328125e-05, 0.0005090236663818359
# 1000: 0.0011548995971679688, 2.47955322265625e-05, 0.0011796951293945312
# 5000: 0.0127410888671875, 2.384185791015625e-05, 0.012764930725097656
# 10000: 0.05553483963012695, 2.9087066650390625e-05, 0.055563926696777344
# 50000: 1.3404419422149658, 3.409385681152344e-05, 1.3404760360717773
# 100000: 2.1850768089294434, 0.00031205673217773438, 2.185188865661621

bin_plot_y_find = [2.193450927734375e-05, 1.9073486328125e-05, 2.47955322265625e-05, 2.384185791015625e-05, 2.9087066650390625e-05, 3.409385681152344e-05, 0.00031205673217773438]
plt.plot(x, bin_plot_y_find)

# 100: 0.0016782283782958984, 3.170967102050781e-05, 0.0017099380493164062
# 500: 0.0016989707946777344, 2.9802322387695312e-05, 0.0017287731170654297
# 1000: 0.0017180442810058594, 3.409385681152344e-05, 0.0017521381378173828
# 5000: 0.003092050552368164, 5.030632019042969e-05, 0.0031423568725585938
# 10000: 0.003778696060180664, 3.4809112548828125e-05, 0.003813505172729492
# 50000: 0.013643980026245117, 5.078315734863281e-05, 0.01369476318359375
# 100000: 0.02608013153076172, 6.103515625e-05, 0.02614116668701172

hash_plot_y_find = [3.170967102050781e-05, 2.9802322387695312e-05, 3.409385681152344e-05, 5.030632019042969e-05, 3.4809112548828125e-05, 5.078315734863281e-05, 6.103515625e-05]
plt.plot(x, hash_plot_y_find)

# 100: 0.0010030269622802734, 6.198883056640625e-05, 0.0010650157928466797
# 500: 0.006124973297119141, 3.719329833984375e-05, 0.006162166595458984
# 1000: 0.013623952865600586, 4.100799560546875e-05, 0.013664960861206055
# 5000: 0.08663582801818848, 6.508827209472656e-05, 0.0867009162902832
# 10000: 0.17029190063476562, 6.723403930664062e-05, 0.17035913467407227
# 50000: 0.9835419654846191, 0.00012111663818359375, 0.9836630821228027
# 100000: 2.0850768089294434, 0.00011205673217773438, 2.085188865661621

rb_plot_y_find = [6.198883056640625e-05, 3.719329833984375e-05, 4.100799560546875e-05, 6.508827209472656e-05, 6.723403930664062e-05, 0.00012111663818359375, 0.00011205673217773438]
plt.plot(x, rb_plot_y_find)

# 100: 2.384185791015625e-05, 2.574920654296875e-05, 4.9591064453125e-05
# 500: 7.200241088867188e-05, 3.0279159545898438e-05, 0.00010228157043457031
# 1000: 0.00012993812561035156, 4.029273986816406e-05, 0.00017023086547851562
# 5000: 0.0006048679351806641, 0.00016188621520996094, 0.000766754150390625
# 10000: 0.0013051033020019531, 0.0002570152282714844, 0.0015621185302734375
# 50000: 0.0061070919036865234, 0.0009410381317138672, 0.007048130035400391
# 100000: 0.011326789855957031, 0.0014128684997558594, 0.01273965835571289

multimap_find = [2.574920654296875e-05, 3.0279159545898438e-05, 4.029273986816406e-05, 0.00016188621520996094, 0.0002570152282714844, 0.0009410381317138672, 0.0014128684997558594]
plt.plot(x, multimap_find)

plt.legend(('bin', 'hash', 'rb', 'multimap'))
plt.show()